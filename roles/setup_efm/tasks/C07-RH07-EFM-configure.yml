---
- name: Check if we have efm.properties file or not
  stat:
    path: "{{ EFM_PROPERTIES }}"
  become: yes
  register: stat_efm_properties

- name: Check if we have efm.nodes file or not
  stat:
    path: "{{ EFM_PROPERTIES }}"
  become: yes
  register: stat_efm_nodes

- name: Create EFM properties File
  copy:
    src: "{{ EFM_PROPERTIES }}.in"
    dest: "{{ EFM_PROPERTIES }}"
    owner: "{{ PG_EFM_USER }}"
    group: "{{ PG_EFM_USER }}"
    remote_src: yes
  when: not stat_efm_properties.stat.exists
  become: yes

- name: Create EFM nodes File
  copy:
    src: "{{ EFM_NODE_FILE }}.in"
    dest: "{{ EFM_NODE_FILE }}"
    owner: "{{ PG_EFM_USER }}"
    group: "{{ PG_EFM_USER }}"
    remote_src: yes
  when: not stat_efm_nodes.stat.exists
  become: yes

- name: Update private IPs in efm.nodes file
  shell: |
    set -o pipefail
    set -eu
    EFM_NODE_FILE="{{ EFM_NODE_FILE }}"
    NEED_UPDATE=1
    for node in {{ EFM_NODES_LIST }}
    do
       CHECK=$(grep -q "${node}" ${EFM_NODE_FILE} && echo "found" \
                      || echo "not_found" )
       [[ "${CHECK}" = "not_found" ]] && NEED_UPDATE=0  || NEED_UPDATE=1
    done
    if [[ ${NEED_UPDATE} -eq 0 ]]
    then
       echo "{{ EFM_NODES_LIST }}" > ${EFM_NODE_FILE}
       echo "node_updated"
    fi
  args:
    executable: /bin/bash
  register: output
  changed_when: "'node_updated' in output.stdout"
  become: yes

- name: Generate EFM encrypted Password
  shell: |
   {{ EFM_BIN_PATH }}/efm encrypt efm --from-env
  args:
    executable: /bin/bash
  environment:
    EFMPASS: "{{ PG_EFM_USER_PASSWORD }}"
  register: pass_opt
  changed_when: pass_opt.rc == 0
  become: yes
  failed_when: "'EFMPASS password not found.' in pass_opt.stdout"

- name: Update EFM efm.properties File
  lineinfile:
    path: /etc/edb/efm-{{ EFM_VERSION }}/efm.properties
    regexp: "{{ line_item.name + '=' }}"
    line: "{{ line_item.name + '=' + line_item.value|string }}"
    state: present
  with_items: "{{ EFM_PARAMETERS }}"
  loop_control:
   loop_var: line_item
  become: yes
  notify: Restart the EFM Service

- name: Start EFM service
  systemd:
    name: "{{ EFM_SERVICE }}"
    enabled: yes
    state: started
  become: yes

- name: Allow efm node on all the host
  shell: |
    set -o pipefail
    set -eu
    CLUSTER_STATUS="$( {{ EFM_BIN_PATH }}/efm cluster-status-json efm |jq '.allowednodes'"
    for ip_address in {{ ALL_NODE_IPS|join(' ') }}
    do
       CHECK=$( echo "${CLUSTER_STATUS}"|grep ${ip_address}|wc -l )
       if [[ ${CHECK} -eq 0 ]]
       then
          {{ EFM_BIN_PATH }}/efm allow-node efm ${ip_address} && echo "successful" \
            || echo "Failed allow-node"
       fi
    done
  args:
    executable: /bin/bash
  register: output
  changed_when: "'successful' in output.stdout"
  failed_when: "'Failed allow-node' in output.stdout"
  become: yes
