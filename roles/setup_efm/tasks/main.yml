---
# Tasks file for edb.postgres.install Role

- name: Reference EPAS Variables
  include_vars: edb-epas.yml
  when: PG_TYPE == 'EPAS'

- name: Reference PG Variables
  include_vars: edb-pg.yml
  when: PG_TYPE == 'PG'

# Display if the Operating System is supported
- name: Display support for Operating System
  block:
    - debug:
        msg: "Operating System = {{ OS }} not supported."
  when: OS not in SUPPORTED_OS

# Display if the Operating System is supported
- name: Display support for Operating System
  block:
    - debug:
        msg: "EPAS/PG Version = {{ OS }} not supported. Only '10', '11' and '12'."
  when: PG_VERSION not in SUPPORTED_PG_VERSION

# End Playbook if the Type of Install, Operating System or Postgres Version are not supported
- meta: end_play
  when: OS not in SUPPORTED_OS or
        PG_VERSION not in SUPPORTED_PG_VERSION

# Display if EFM version is supported
- name: Display support for EFM
  block:
    - debug:
        msg: "EFM Version = {{ EFM_VERSION }} not supported."
  when: EFM_VERSION not in SUPPORTED_EFM_VERSION

# End Playbook if the Type of Install, Operating System or Postgres Version are not supported
- meta: end_play
  when: EFM_VERSION not in SUPPORTED_EFM_VERSION

# Configure Variables

# Setting variables available for all nodes
- name: Set Node Type
  set_fact:
    NODE_TYPE: "{{ item.value.node_type }}"
  register: output

- name: Set EFM nodes and witness Type
  set_fact:
    EFM_INSTALL_VERSION : "{{ EFM_VERSION | replace('.','') }}"
    EFM_WITNESS: "{{ 'true' if (item.value.node_type == 'witness') else 'false' }}"
  register: output

- name: Prepare EFM node list
  set_fact:
    EFM_NODES_LIST: "{{ EFM_NODES_LIST + line_items + ':7800 ' }}"
  with_items: "{{ EFM_NODES_PRIVATE_IP }}"
  loop_control:
    loop_var: line_items

- name: Set USE_HOSTNAME based on variable condition and users input
  set_fact:
    USE_HOSTNAME: False
  when: EFM_NODES_HOSTS_LIST|length < 1 or ALL_NODE_HOSTNAMES|length < 1

# Display Details of Node to Install
- name: Display current Node to Install
  block:
    - debug:
        msg:
            "Operating System = {{ OS }}:
             PG_TYPE = {{ PG_TYPE }},
             Node Type = {{ NODE_TYPE }},
             PG_DATA = {{ PG_DATA }},
             EFM_SERVICE = {{ EFM_SERVICE }},
             EFM_NODES_LIST = {{ EFM_NODES_LIST }},
             USE_HOSTNAME = {{ USE_HOSTNAME }},
             EFM_WITNESS =  {{ EFM_WITNESS }},
             PG_EFM_USER = {{ PG_EFM_USER }},
             Public IP = {{ item.value.public_ip }}"

- name: Set FORCE_EFM_INSTALL based on the user input
  set_fact:
    FORCE_EFM_INSTALL: "{{ item.value.force_efm_install }}"
  when: item.value.force_efm_install is defined
  register: output

- name: Update etc_hosts based on USE_HOSTNAME
  block:
    - import_tasks: C07-RH07-update-etc-hosts.yml
  become: yes
  when:
    - USE_HOSTNAME
  delegate_to: "{{ item.value.public_ip }}"

- name: Prepare EFM node list based on hostname
  set_fact:
    EFM_HOSTS_LIST: "{{ EFM_HOSTS_LIST + line_items + ':7800 ' }}"
  with_items: "{{ EFM_NODES_HOSTS_LIST }}"
  loop_control:
    loop_var: line_items
  when: USE_HOSTNAME
  register: output

- name: Remove before we start as per force_install
  block:
    - include_tasks: C07-RH07-EFM-rm-install-configure.yml
  become: yes
  when: FORCE_EFM_INSTALL
  delegate_to: "{{ item.value.public_ip }}"

- name: Make sure EFM user exists and have right privileges.
  block:
    - include_tasks: C07-RH07-EFM-user.yml
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Install and Configure Postgres on CentOS7 or RHEL7
  block:
    - import_tasks: C07-RH07-EFM-hba.yml
  when: NODE_TYPE in ['primary','standby']
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Install and Configure Postgres on CentOS7 or RHEL7
  block:
    - import_tasks: C07-RH07-EFM-install.yml
    - import_tasks: C07-RH07-EFM-configure.yml
    - import_tasks: C07-RH07-EFM-scripts-parameters.yml
  when: NODE_TYPE in ['primary','standby']
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Reset FORCE/SKIPP_EFM_INSTALL based on the user input
  set_fact:
    FORCE_EFM_INSTALL: false
    EFM_NODES_LIST: ""
    EFM_HOSTS_LIST: ""
  register: output
