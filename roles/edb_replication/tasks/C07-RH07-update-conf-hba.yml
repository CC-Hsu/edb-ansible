- name: Check user defined parameters and update
  postgresql_set:
     login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
     port: "{{ PG_PORT }}"
     db: "{{ PG_DATABASE }}"
     login_user: "{{ PG_OWNER }}"
     name: "{{ line_item.name }}"
     value: "{{ line_item.value }}"
  when: PG_POSTGRES_CONF_PARAMS|length > 0
  with_items: "{{ PG_POSTGRES_CONF_PARAMS }}"
  become: true
  become_user: "{{ PG_OWNER }}"
  loop_control:
     loop_var: line_item
  notify: Restart the PG Service

- name: Find the HBA File location on primary
  postgresql_query:
     login_user: "{{ PG_OWNER }}"
     port: "{{ PG_PORT }}"
     login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
     query: "SHOW hba_file;"
     db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Adding standby IP address entries into pg_hba file on primary
  postgresql_pg_hba:
     dest: "{{ hba_info.query_result[0].hba_file }}"
     contype: host
     users: "{{ line_item.user }}"
     source: "{{ line_items.ip_address }}"
     databases: "{{ line_item.databases }}"
     method: scram-sha-256
     state: present
     create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: PG_ALLOW_IP_ADDRESSES|length > 0 and not PG_SSL
  with_items: "{{ PG_ALLOW_IP_ADDRESSES }}"
  loop_control:
      loop_var: line_items
  register: hba_update
  notify: Reload the PG Service

- name: Adding standby IP address entries into pg_hba file on primary
  postgresql_pg_hba:
     dest: "{{ hba_info.query_result[0].hba_file }}"
     contype: hostssl
     users: "{{ line_item.users }}"
     source: "{{ line_items.ip_addresses }}"
     databases: "{{ line_item.databases }}"
     method: scram-sha-256
     state: present
     create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: PG_ALLOW_IP_ADDRESSES|length > 0 and PG_SSL
  with_items: "{{ PG_ALLOW_IP_ADDRESSES }}"
  loop_control:
      loop_var: line_items
  register: hba_update
  notify: Reload the PG Service
