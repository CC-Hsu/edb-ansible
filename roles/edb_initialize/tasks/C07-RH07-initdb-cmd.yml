- name: Define INITDB command.
  set_fact:
    PG_INITDB: "{{ PG_INITDB + ' --pgdata ' + PG_DATA }}"

- name: Verify PG_WAL and accordingly add the in the INITDB
  set_fact:
    PG_INITDB: "{{ PG_INITDB + ' --waldir=' + PG_WAL }}"
  when: PG_WAL|length > 0  and not PG_DATA in PG_WAL

- name: Verify PG_ENCODING and accordingly add the in the INITDB
  set_fact:
    PG_INITDB: "{{ PG_INITDB + ' --encoding=' + PG_ENCODING }}"
  when: PG_ENCODING|length >0

- name: Verify PG_LOCALE and accordingly add the in the INITDB
  set_fact:
    PG_INITDB: "{{ PG_INITDB + ' --locale=' + PG_LOCALE + '.' + PG_ENCODING }}"
  when: PG_ENCODING|length > 0 and PG_LOCALE|length > 0

- name: Add other initdb options
  set_fact:
    PG_INITDB: "{{ PG_INITDB + PG_INITDB_OPTIONS }}"
  when: PG_INITDB_OPTIONS|length >0

- name: Initialize Database Postgres Service
  command: "{{ PG_INITDB }}"
  args:
    creates: "{{ PG_DATA }}/PG_VERSION"
  become: yes
  become_user: "{{ PG_OWNER }}"

- name: Update unix_socket_directories if provided
  lineinfile:
    path: "{{ PG_DATA }}/postgresql.conf"
    regexp: "{{ line_item.From }}"
    line: "{{ line_item.To }}"
  when: PG_UNIX_SOCKET_DIRECTORIES|length > 0
  with_items:
    - { From: '#unix_socket_directories =', To: "unix_socket_directories = '{{ PG_UNIX_SOCKET_DIRECTORIES | join(',') }}'"}
  loop_control:
    loop_var: line_item
  become: yes

