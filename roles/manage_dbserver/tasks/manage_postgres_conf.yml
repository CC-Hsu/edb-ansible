---
- name: Check user defined parameters and update
  postgresql_set:
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    db: "{{ pg_database }}"
    login_user: "{{ pg_owner }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  when: pg_postgres_conf_params|length > 0
  with_items: "{{ pg_postgres_conf_params }}"
  become: yes
  become_user: "{{ pg_owner }}"
  loop_control:
    loop_var: line_item
  register: params

- name: Find the hba file location on primary
  postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "show hba_file;"
    db: "{{ pg_database }}"
  when: pg_hba_ip_addresses|length > 0
  become: yes
  become_user: "{{ pg_owner }}"
  register: hba_info

- name: Manage ip address entries into pg_hba file
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: "{{ line_item.contype | default('hostssl') }}"
    users: "{{ line_item.users | default ('all') }}"
    source: "{{ line_item.source }}"
    databases: "{{ line_item.databases | default('all') }}"
    method: "{{ line_item.method | default('scram-sha-256') }}"
    state: "{{ line_item.state | default('present') }}"
    create: true
  become: yes
  become_user: "{{ pg_owner }}"
  when: pg_hba_ip_addresses|length > 0
  with_items: "{{ pg_hba_ip_addresses }}"
  loop_control:
      loop_var: line_item
  register: hba_update

- name: Reload the pg service
  systemd:
    name: "{{ pg_service }}"
    daemon_reload: yes
    state: reloaded
  become: yes
  when: hba_update.changed
        or (params.changed and not params.restart_required)

- name: Restart the pg service
  systemd:
    name: "{{ pg_service }}"
    daemon_reload: yes
    state: restarted
  become: yes
  when:
    - params.changed
    - params.restart_required
