---
# tasks file for the setup_pem role

- name: reference variables
  include_vars: "{{ pg_type }}.yml"

# Check if the Operating System is supported
- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

# Check if the Database Version is supported
- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Prepare etc_hosts_lists
  set_fact:
    etc_hosts_lists: "{{ etc_hosts_lists + [item.value.private_ip + ' ' + item.value.hostname] }}"
  when:
    - item.value.hostname is defined
    - use_hostname
    - item.value.node_type in supported_node_type
  with_dict: "{{ servers }}"

- name: Get the pem_server_private/public_ip
  set_fact:
    pem_server_private_ip: "{{ item.value.private_ip }}"
    pem_server_public_ip: "{{ item.value.public_ip }}"
    pem_server_exists: true
  when: item.value.node_type == 'pemserver'
  with_dict: "{{ servers }}"

- name: Get the primary_private/public_ip
  set_fact:
    primary_private_ip: "{{ item.value.private_ip }}"
    primary_public_ip: "{{ item.value.public_ip }}"
  when:
    - item.value.node_type == 'primary'
    - pem_server_exists
  with_dict: "{{ servers }}"

- name: Create pemagent user on primary
  import_tasks: pem_agent_user.yml
  when: pem_server_exists
  delegate_to: "{{ primary_public_ip }}"

- name: Prepare hba host ip lists
  include_tasks: prepare_hba_value_list.yml
  when:
    - item.value.node_type in ['primary','standby']
    - pem_server_exists
  with_dict: "{{ servers }}"

- name: Configure pemserver
  include_tasks: setup_pemserver.yml
  when:
     - item.value.node_type == 'pemserver'
     - pem_server_exists
  with_dict: "{{ servers }}"

- name: Execute setup_pemagent for other nodes
  include_tasks: setup_pemagent.yml
  when:
     - item.value.node_type != 'pemserver'
     - pem_server_exists
  with_dict: "{{ servers }}"

- name: Update pem probes and alerts
  import_tasks: pem_server_probe_alert.yml
  when: pem_server_exists
  delegate_to: "{{ pem_server_public_ip }}"

- name: Reset the variables
  set_fact:
    pem_server_private_ip: ""
    pem_server_public_ip: ""
    primary_private_ip: ""
    primary_public_ip: ""
    etc_hosts_lists: []
    input_password: ""
    pg_allow_ip_addresses: []
    pem_server_hba_local_entry: []
    pem_agent_hba_local_entry: []
