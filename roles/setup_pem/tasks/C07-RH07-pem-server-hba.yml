---

- name: Find the HBA File location on the node
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SHOW hba_file;"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Add all node IP address entries into pg_hba file for efm user
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: hostssl
    users: "+{{ line_items.group }}"
    source: "{{ line_items.ip_addr }}"
    databases: "{{ line_items.database }}"
    method: "{{ line_items.method }}"
    state: present
    create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  with_items:
    - { database: "pem", group: "pem_user", ip_addr: "{{ item.value.private_ip }}/32", method: "scram-sha-256" }
    - { database: "pem", group: "pem_agent", ip_addr: "{{ item.value.private_ip }}/32", method: "cert" }
    - { database: "pem", group: "pem_agent", ip_addr: "127.0.0.1/32", method: "cert" }
    - { database: "pem", group: "pem_user", ip_addr: "{{ PEM_ALLOWED_CONNECTIONS }}", method: "scram-sha-256" }
    - { database: "pem", group: "pem_agent", ip_addr: "{{ PEM_ALLOWED_CONNECTIONS }}", method: "cert" }
  loop_control:
    loop_var: line_items
  register: hba_update

- name: Reload the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    state: reloaded
  become: yes
  when: hba_update.changed
