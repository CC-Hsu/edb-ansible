- name: Check user defined parameters and update
  postgresql_set:
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    port: "{{ PG_PORT }}"
    db: "{{ PG_DATABASE }}"
    login_user: "{{ PG_OWNER }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  when: PG_POSTGRES_CONF_PARAMS|length > 0
  with_items: "{{ PG_POSTGRES_CONF_PARAMS }}"
  become: true
  become_user: "{{ PG_OWNER }}"
  loop_control:
    loop_var: line_item
  register: params

- name: Find the HBA File location on primary
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SHOW hba_file;"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Adding IP address entries into pg_hba file on primary
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: host
    users: "{{ line_item.user }}"
    source: "{{ line_item.ip_address }}"
    databases: "{{ line_item.databases }}"
    method: scram-sha-256
    state: present
    create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: PG_ALLOW_IP_ADDRESSES|length > 0 and not PG_SSL
  with_items: "{{ PG_ALLOW_IP_ADDRESSES }}"
  loop_control:
      loop_var: line_item
  register: hba_update

- name: Adding IP address entries into pg_hba file on primary
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: hostssl
    users: "{{ line_item.users }}"
    source: "{{ line_item.ip_addresses }}"
    databases: "{{ line_item.databases }}"
    method: scram-sha-256
    state: present
    create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: PG_ALLOW_IP_ADDRESSES|length > 0 and PG_SSL
  with_items: "{{ PG_ALLOW_IP_ADDRESSES }}"
  loop_control:
      loop_var: line_item
  register: hba_update

- name: Reload the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: reloaded
  become: yes
  when: hba_update.changed

- name: Restart the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: restarted
  become: yes
  when: params.changed
