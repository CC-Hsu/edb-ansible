- name: Define ssl  file names
  set_fact:
    SSL_CA_FILE: "{{ PG_SSL_DIR }}/root.crt"
    SSL_KEY_FILE: "{{ PG_SSL_DIR }}/server.key"
    SSL_CERT_FILE: "{{ PG_SSL_DIR }}/server.crt"
  register: output

- name: Generate SSL certificates
  shell: |
    set -o pipefail
    set -eu
    CERTS_DIRECTORY="{{ PG_SSL_DIR }}"
    OPENSSL_CNF=$(openssl version -d|awk '{print $2}'|xargs echo)
    DOMAIN_NAME=$(hostname --d)
    HOST_FQDN=$(hostname --fqdn)
    SERVER_KEY="${CERTS_DIRECTORY}/server.key"
    SERVER_CRT="${CERTS_DIRECTORY}/server.crt"
    SERVER_CSR="${CERTS_DIRECTORY}/server.csr"
    ROOT_KEY="${CERTS_DIRECTORY}/root.key"
    ROOT_CRT="${CERTS_DIRECTORY}/root.crt"
    ROOT_CSR="${CERTS_DIRECTORY}/root.csr"
    NUMBER_OF_DAYS=365

    mkdir -p ${CERTS_DIRECTORY}

    openssl req -new -x509 -days ${NUMBER_OF_DAYS} \
      -nodes \
      -text -out ${SERVER_CRT} \
      -keyout ${SERVER_KEY} \
      -subj "/CN=${HOST_FQDN}"

    openssl req -new -nodes \
      -text -out ${ROOT_CSR} \
      -keyout ${ROOT_KEY} -subj "/CN=root.${DOMAIN_NAME}"

    openssl x509 -req \
      -in ${ROOT_CSR} \
      -text -days ${NUMBER_OF_DAYS}0 \
      -extfile ${OPENSSL_CNF}/openssl.cnf \
      -extensions v3_ca \
      -signkey ${ROOT_KEY} \
      -out ${ROOT_CRT}

    openssl req -new -nodes \
      -text -out ${SERVER_CSR} \
      -keyout ${SERVER_KEY} \
      -subj "/CN=${HOST_FQDN}"

    openssl x509 -req \
      -in ${SERVER_CSR} \
      -text -days ${NUMBER_OF_DAYS} \
      -CA ${ROOT_CRT} \
      -CAkey ${ROOT_KEY} -CAcreateserial \
      -out ${SERVER_CRT}
    chown -R {{ PG_OWNER }}:{{ PG_OWNER }} /etc/edb/certs
    chmod 600 {{ SSL_CA_FILE }} {{ SSL_KEY_FILE }} {{ SSL_CERT_FILE }}
    touch ${CERTS_DIRECTORY}/.created_ssl
  args:
    creates: "{{ PG_SSL_DIR }}/.created_ssl"
    executable: /bin/bash
  when: PG_SSL_GENERATE
  become: yes

- name: Find the HBA File location
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SHOW hba_file;"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Update localhost addresses entries into pg_hba file
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: host
    users: "all"
    source: "{{ line_items.ip_addr }}"
    databases: "{{ line_items.database }}"
    state: absent
  become: yes
  become_user: "{{ PG_OWNER }}"
  with_items:
    - { ip_addr: "127.0.0.1/32", database: "all" }
    - { ip_addr: "::1/128", database: "all" }
    - { ip_addr: "127.0.0.1/32", database: "replication" }
    - { ip_addr: "::1/128", database: "replication" }
  loop_control:
    loop_var: line_items
  register: ssl_hba_update

- name: Update localhost addresses entries into pg_hba file
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: hostssl
    users: "all"
    source: "{{ line_items.ip_addr }}"
    databases: "{{ line_items.database }}"
    method: scram-sha-256
    state: present
    create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  with_items:
    - { ip_addr: "127.0.0.1/32", database: "all" }
    - { ip_addr: "::1/128", database: "all" }
    - { ip_addr: "127.0.0.1/32", database: "replication" }
    - { ip_addr: "::1/128", database: "replication" }
  loop_control:
    loop_var: line_items
  register: ssl_hba_update

- name: Configure ssl Settings in postgresql.auto.conf
  postgresql_set:
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    port: "{{ PG_PORT }}"
    db: "{{ PG_DATABASE }}"
    login_user: "{{ PG_OWNER }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  with_items:
    - { name: "ssl", value: "on" }
    - { name: "ssl_ca_file", value: "{{ SSL_CA_FILE }}" }
    - { name: "ssl_key_file", value: "{{ SSL_KEY_FILE }}" }
    - { name: "ssl_cert_file", value: "{{ SSL_CERT_FILE }}" }
  become: true
  become_user: "{{ PG_OWNER }}"
  loop_control:
    loop_var: line_item
  register: ssl_params

- name: Reload the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: reloaded
  become: yes
  when: ssl_hba_update.changed

- name: Restart the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: restarted
  become: yes
  when: ssl_params.changed
