- name: Make sure we have PG_SSL_DIR
  file:
    path: "{{ PG_SSL_DIR }}"
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
    mode: 0700
    state: directory
  become: yes

- name: Check if we have CA key exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/ca_key.key"
  become: yes
  register: ssl_ca_key

- name: Check if we have CA certificate exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/ca_certificate.crt"
  become: yes
  register: ssl_ca_certificate

- name: Check if we have root.crt exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/root.crt"
  become: yes
  register: ssl_root_crt

- name: Check if we have root crl exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/root.crl"
  become: yes
  register: ssl_root_crl

- name: Check if we have server.key exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/server.key"
  become: yes
  register: ssl_server_key

- name: Check if we have server.crt exists or not
  stat:
    path: "{{ PG_SSL_DIR }}/server.crt"
  become: yes
  register: ssl_server_crt

- name: Create ssl extension in PG_DATABASE
  postgresql_ext:
    name: sslutils
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    db: "{{ PG_DATABASE }}"
    state: present
  become: yes
  become_user: "{{ PG_OWNER }}"

- name: Create SSL cert key
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SELECT public.openssl_rsa_generate_key(4096);"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: not ssl_ca_key.stat.exists
  register: sql_output

- name: CA key variable
  set_fact:
    ca_key: "{{ sql_output.query_result[0].openssl_rsa_generate_key }}"
  when: not ssl_ca_key.stat.exists

- name: Create CA Key file in PG_DATA
  copy:
    dest: "{{ PG_SSL_DIR }}/ca_key.key"
    content: "{{ ca_key }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_ca_key.stat.exists
  become: yes

- name: Create a certificate authority key
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SELECT public.openssl_csr_to_crt(openssl_rsa_key_to_csr( '{{ ca_key }}',
                                      '{{ CERT_COMMON_NAME }}', '{{ CERT_COUNTRY }}',
                                      '{{ CERT_STATE }}', '{{ CERT_CITY }}', '{{ CERT_ORG_UNIT }}',
                                      '{{ CERT_EMAIL }}'), NULL, '{{ PG_SSL_DIR }}/ca_key.key');"
    db: "{{ PG_DATABASE }}"
  when: not ssl_ca_certificate.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: sql_output

- name: CA certificate variable
  set_fact:
    ca_certificate: "{{ sql_output.query_result[0].openssl_csr_to_crt }}"
  when: not ssl_ca_certificate.stat.exists

- name: Create CA certificate file in PG_DATA
  copy:
    dest: "{{ PG_SSL_DIR }}/ca_certificate.crt"
    content: "{{ ca_certificate }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_ca_certificate.stat.exists
  become: yes

- name: Create root.crt using CA certificate file in PG_DATA
  copy:
    dest: "{{ PG_SSL_DIR }}/root.crt"
    content: "{{ ca_certificate }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_root_crt.stat.exists
  become: yes

- name: Create a root.crl
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SELECT public.openssl_rsa_generate_crl('{{ PG_SSL_DIR }}/ca_certificate.crt','{{ PG_SSL_DIR }}/ca_key.key');"
    db: "{{ PG_DATABASE }}"
  when: not ssl_root_crl.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: sql_output

- name: Create root.crl
  copy:
    dest: "{{ PG_SSL_DIR }}/root.crl"
    content: "{{ sql_output.query_result[0].openssl_rsa_generate_crl }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_root_crl.stat.exists
  become: yes

- name: Create SSL Server key
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SELECT public.openssl_rsa_generate_key(4096);"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: not ssl_server_key.stat.exists
  register: sql_output

- name: Server key variable
  set_fact:
    server_key: "{{ sql_output.query_result[0].openssl_rsa_generate_key }}"
  when: not ssl_server_key.stat.exists

- name: Create Server Key file in PG_DATA
  copy:
    dest: "{{ PG_SSL_DIR }}/server.key"
    content: "{{ server_key }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_server_key.stat.exists
  become: yes

- name: Create a Server cert
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SELECT public.openssl_csr_to_crt(openssl_rsa_key_to_csr( '{{ server_key }}',
                                      '{{ CERT_COMMON_NAME }}', '{{ CERT_COUNTRY }}',
                                      '{{ CERT_STATE }}', '{{ CERT_CITY }}', '{{ CERT_ORG_UNIT }}',
                                      '{{ CERT_EMAIL }}'), NULL, '{{ PG_SSL_DIR }}/ca_key.key');"
    db: "{{ PG_DATABASE }}"
  when: not ssl_server_crt.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: sql_output

- name: CA certificate variable
  set_fact:
    server_certificate: "{{ sql_output.query_result[0].openssl_csr_to_crt }}"
  when: not ssl_server_crt.stat.exists

- name: Create CA certificate file in PG_DATA
  copy:
    dest: "{{ PG_SSL_DIR }}/server.crt"
    content: "{{ server_certificate }}"
    mode: 0600
    owner: "{{ PG_OWNER }}"
    group: "{{ PG_OWNER }}"
  when: not ssl_server_crt.stat.exists
  become: yes

- name: Find the HBA File location
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SHOW hba_file;"
    db: "{{ PG_DATABASE }}"
  when: not ssl_ca_key.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Update localhost addresses entries into pg_hba file
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: host
    users: "all"
    source: "{{ line_items.ip_addr }}"
    databases: "{{ line_items.database }}"
    state: absent
  when: not ssl_ca_key.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  with_items:
    - { ip_addr: "127.0.0.1/32", database: "all" }
    - { ip_addr: "::1/128", database: "all" }
    - { ip_addr: "127.0.0.1/32", database: "replication" }
    - { ip_addr: "::1/128", database: "replication" }
  loop_control:
    loop_var: line_items
  register: ssl_hba_update

- name: Update localhost addresses entries into pg_hba file
  postgresql_pg_hba:
    dest: "{{ hba_info.query_result[0].hba_file }}"
    contype: hostssl
    users: "all"
    source: "{{ line_items.ip_addr }}"
    databases: "{{ line_items.database }}"
    method: scram-sha-256
    state: present
    create: true
  when: not ssl_ca_key.stat.exists
  become: yes
  become_user: "{{ PG_OWNER }}"
  with_items:
    - { ip_addr: "127.0.0.1/32", database: "all" }
    - { ip_addr: "::1/128", database: "all" }
    - { ip_addr: "127.0.0.1/32", database: "replication" }
    - { ip_addr: "::1/128", database: "replication" }
  loop_control:
    loop_var: line_items
  register: ssl_hba_update

- name: Configure ssl Settings in postgresql.auto.conf
  postgresql_set:
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    port: "{{ PG_PORT }}"
    db: "{{ PG_DATABASE }}"
    login_user: "{{ PG_OWNER }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  with_items:
    - { name: "ssl", value: "on" }
    - { name: "ssl_ca_file", value: "{{ PG_SSL_DIR }}/root.crt" }
    - { name: "ssl_key_file", value: "{{ PG_SSL_DIR }}/server.key" }
    - { name: "ssl_cert_file", value: "{{ PG_SSL_DIR }}/server.crt" }
    - { name: "ssl_crl_file", value: "{{ PG_SSL_DIR }}/root.crl" }
  when: not ssl_ca_key.stat.exists
  become: true
  become_user: "{{ PG_OWNER }}"
  loop_control:
    loop_var: line_item
  register: ssl_params

- name: Reload the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: reloaded
  become: yes
  when: ssl_hba_update.changed

- name: Restart the PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: restarted
  become: yes
  when: ssl_params.changed
