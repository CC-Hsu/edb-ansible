---

- name: set local ssl file
  set_fact:
      LOCAL_SSL_DIR: "{{ USER_HOMEDIR + '/.edb/primaryssl' }}"
  register: output

- name: create the local ssl directory
  file:
      path: "{{ PG_SSL_DIR }}/.list"
      state: touch
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"

- name: list the ssl file
  shell: |
    #!/bin/bash
    set -o pipefail
    set -e
    rm -f {{ PG_SSL_DIR }}/.list
    ls -1 {{ PG_SSL_DIR }}
  args:
    removes: "{{ PG_SSL_DIR }}/.list"
    executable: /bin/bash
  register: ssl_file
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"

- name: create the local ssl directory
  file:
      path: "{{ LOCAL_SSL_DIR }}"
      state: directory
  become: no
  delegate_to: localhost

- name: create the local ssl directory
  file:
      path: "{{ PG_SSL_DIR }}"
      state: directory

- name: fetch ssl to local
  fetch:
      src: "{{ PG_SSL_DIR }}/{{ line_item }}"
      dest: "{{ LOCAL_SSL_DIR }}"
  with_items: "{{ ssl_file.stdout_lines }}"
  loop_control:
      loop_var: line_item
  become: yes
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"

- name: Copy the SSL files to standby
  copy:
      src: "{{ LOCAL_SSL_DIR }}/localhost/{{ PG_SSL_DIR }}/{{ line_item }}"
      dest: "{{ PG_SSL_DIR }}/{{ line_item }}"
  with_items: "{{ ssl_file.stdout_lines }}"
  loop_control:
      loop_var: line_item
  become: yes

- name: Change ownership of the SSL
  file:
      path: "{{ PG_SSL_DIR }}"
      state: directory
      recurse: yes
      owner: "{{ PG_OWNER }}"
  become: yes

- name: Change the SSL files permission
  file:
      path: "{{ PG_SSL_DIR }}/{{ line_item }}"
      mode: 0600
  with_items: "{{ ssl_file.stdout_lines }}"
  loop_control:
      loop_var: line_item
  become: yes

- name: Change the SSL files permission
  file:
      path: "{{ PG_SSL_DIR }}/.created_ssl"
      mode: 0600
      state: touch
  become: yes

- name: Remove the local ssl directory
  file:
      path: "{{ LOCAL_SSL_DIR }}"
      state: absent
  become: no
  delegate_to: localhost


