
- name: Configure Global Settings in postgresql.auto.conf
  postgresql_set:
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    port: "{{ PG_PORT }}"
    db: "{{ PG_DATABASE }}"
    login_user: "{{ PG_OWNER }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  when: PG_LOG in PG_LOG_FILENAME and not PG_DATA in PG_LOG
  with_items:
      - { name: "log_filename", value: "{{ PG_LOG_FILENAME }}" }
  become: true
  become_user: "{{ PG_OWNER }}"
  loop_control:
    loop_var: line_item
  notify: Reload the PG Service

- name: Find the HBA File location on standby
  postgresql_query:
      login_user: "{{ PG_OWNER }}"
      port: "{{ PG_PORT }}"
      login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
      query: "SHOW hba_file;"
      db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: hba_info

- name: Adding standby IP address entries into pg_hba file on standby
  postgresql_pg_hba:
      dest: "{{ hba_info.query_result[0].hba_file }}"
      contype: host
      users: "{{ PG_REPLICATION_USER }}"
      source: "{{ line_items }}/32"
      databases: replication
      method: scram-sha-256
      state: present
      create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: line_items != item.value.private_ip and not PG_SSL
  with_items: "{{ ALL_NODE_IPS }}"
  loop_control:
      loop_var: line_items
  notify: Reload the PG Service

- name: Adding standby IP address entries into pg_hba file on standby
  postgresql_pg_hba:
      dest: "{{ hba_info.query_result[0].hba_file }}"
      contype: hostssl
      users: "{{ PG_REPLICATION_USER }}"
      source: "{{ line_items }}/32"
      databases: replication
      method: scram-sha-256
      state: present
      create: true
  become: yes
  become_user: "{{ PG_OWNER }}"
  when: line_items != item.value.private_ip and PG_SSL
  with_items: "{{ ALL_NODE_IPS }}"
  loop_control:
      loop_var: line_items
  notify: Reload the PG Service
