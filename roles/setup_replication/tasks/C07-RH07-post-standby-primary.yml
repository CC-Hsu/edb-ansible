---
- name: Check if we have synchronous_standby_names set
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "SHOW synchronous_standby_names;"
    db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: system_parameter
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"

- name: Standby Quorum string
  set_fact:
    STANDBY_LIST: "{{ (' 1 (' + item.key + ')') if ( STANDBY_QUORUM_TYPE|length > 0 ) else item.key }}"
  when:
    - SYNCHRONOUS_STANDBY_NAMES|length < 1
    - system_parameter.query_result[0].synchronous_standby_names|length < 1
  register: output

- name: Build synchronous_standby_names
  set_fact:
    SYNCHRONOUS_STANDBY_NAMES: "{{ SYNCHRONOUS_STANDBY_NAMES + STANDBY_QUORUM_TYPE + STANDBY_LIST }}"
  when:
    - SYNCHRONOUS_STANDBY_NAMES|length < 1
    - system_parameter.query_result[0].synchronous_standby_names|length < 1
  register: output

- name: Build synchronous_standby_names on primary
  postgresql_query:
    login_user: "{{ PG_OWNER }}"
    port: "{{ PG_PORT }}"
    login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
    query: "{{ sql_query }}"
    db: "{{ PG_DATABASE }}"
  when: system_parameter.query_result[0].synchronous_standby_names|length > 0
  become: yes
  become_user: "{{ PG_OWNER }}"
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"
  register: sql_output

- name: Set synchronous_standby_names
  set_fact:
    SYNCHRONOUS_STANDBY_NAMES: "{{ sql_output.query_result[0].new_setting }}"
  when:
    - system_parameter.query_result[0].synchronous_standby_names|length > 0
    - sql_output.rowcount > 0
  register: output

- name: "Set synchronous parameters as per setting on primary"
  postgresql_set:
    name: "{{ line_items.name }}"
    value: "{{ line_items.value }}"
    db: "{{ PG_DATABASE }}"
    port: "{{ PG_PORT }}"
    login_user: "{{ PG_OWNER }}"
    login_host: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  when:
    - item.value.replication_type == 'synchronous'
  with_items:
    - {  name: synchronous_commit, value: remote_apply }
    - {  name: synchronous_standby_names, value: "{{ SYNCHRONOUS_STANDBY_NAMES }}" }
  loop_control:
      loop_var: line_items
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"
  register: sync_update

- name: Reload the Primary PG Service
  systemd:
    name: "{{ PG_SERVICE }}"
    daemon_reload: yes
    state: reloaded
  when: sync_update.changed
  become: yes
