---
- name: Check if we have synchronous_standby_names set
  postgresql_query:
      login_user: "{{ PG_OWNER }}"
      port: "{{ PG_PORT }}"
      login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
      query: "SHOW synchronous_standby_names;"
      db: "{{ PG_DATABASE }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: system_parameter

- name: Standby Quorum string
  set_fact:
    # STANDBY_LIST: "{{ (' 1 (' if ( STANDBY_QUORUM_TYPE|length > 0 ) else '') + item.key + (')' if ( STANDBY_QUORUM_TYPE|length > 0 ) }}"
     STANDBY_LIST: "{{ (' 1 (' + item.key + ')') if ( STANDBY_QUORUM_TYPE|length > 0 ) else item.key }}"
  when:
      - SYNCHRONOUS_STANDBY_NAMES|length < 1
      - system_parameter.query_result[0].synchronous_standby_names|length < 1
  register: output

- name: Build synchronous_standby_names
  set_fact:
     SYNCHRONOUS_STANDBY_NAMES: "{{ SYNCHRONOUS_STANDBY_NAMES + STANDBY_QUORUM_TYPE + STANDBY_LIST }}"
  when:
      - SYNCHRONOUS_STANDBY_NAMES|length < 1
      - system_parameter.query_result[0].synchronous_standby_names|length < 1
  register: output

- name: Verify the synchronous_standby_names on primary
  postgresql_query:
      login_user: "{{ PG_OWNER }}"
      port: "{{ PG_PORT }}"
      login_unix_socket: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
      query: "{{ sql_query }}"
      db: "{{ PG_DATABASE }}"
  when: system_parameter.query_result[0].synchronous_standby_names|length > 0
  become: yes
  become_user: "{{ PG_OWNER }}"
  register: sql_output

- name: Display the new_setting
  block:
    - debug:
        msg: "sql_output.query_result[0].new_setting"

- name: Set synchronous_standby_names
  set_fact:
     SYNCHRONOUS_STANDBY_NAMES: "{{ sql_output.query_result[0].new_setting }}"
  when:
     - system_parameter.query_result[0].synchronous_standby_names|length > 0
     - sql_output.rowcount > 0
  register: output

- name: "Set synchronous parameters as per setting on primary"
  postgresql_set:
      name: "{{ line_items.name }}"
      value: "{{ line_items.value }}"
      db: "{{ PG_DATABASE }}"
      port: "{{ PG_PORT }}"
      login_user: "{{ PG_OWNER }}"
      login_host: "{{ PG_UNIX_SOCKET_DIRECTORIES[0] }}"
  become: yes
  become_user: "{{ PG_OWNER }}"
  when:
      - item.value.replication_type == 'synchronous'
  with_items:
      - {  name: synchronous_commit, value: remote_apply }
      - {  name: synchronous_standby_names, value: "{{ SYNCHRONOUS_STANDBY_NAMES }}" }
  loop_control:
      loop_var: line_items
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"


- name: Reload and restart the PG Service
  systemd:
      name: "{{ PG_SERVICE }}"
      daemon_reload: yes
      state: reloaded
  become: yes
  delegate_to: "{{ PRIMARY_PUBLIC_IP }}"
